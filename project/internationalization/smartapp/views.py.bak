from django.shortcuts import render
from django.shortcuts import render_to_response
from django.http import HttpResponse
from django.template.loader import get_template
from django.template import Context
from django.views.generic.base import TemplateView
from django.utils import timezone
from django.shortcuts import redirect
from django.core import serializers
from models import VehicleBrand
from django import template
from django import forms
import django_tables2 as tables
from django.db.models import Q

from .models import Line
from .models import Post
from .forms import PostForm
from .forms import SearchForm
from .models import NBUList
from .models import RD
from .models import RDProtocol
from .models import VehicleBrand
from .models import VehicleModel

register = template.Library()


# @register.inclusion_tag("brand_model_select.html")
@register.inclusion_tag("nbusearch.html")
def brand_model_select():
    brand_list = VehicleBrand.objects.all()
    return {'brand_list': brand_list}


def all_json_models(request, brand):
    current_brand = VehicleBrand.objects.get(code=brand)
    models = VehicleModel.objects.all().filter(brand=current_brand)
    json_models = serializers.serialize("json", models)
    return HttpResponse(json_models, mimetype="application/javascript")


# ------------- Working code with NBUList DB--------------
# def nbucompdbview(request):
#     '''A view to send user to the tables page'''
#     # Display full table of NBU Compatibility to chose from
#     nbucompquery_results = NBUList.objects.all()
#     return render(request, 'smartapp/nbucompdb.html', {'nbucomplist': nbucompquery_results})

def nbucompdbview(request):
    '''A view to send user to the tables page'''
    # Display full table of NBU Compatibility to chose from
    nbucompquery_results = RD.objects.all()
    return render(request, 'smartapp/nbucompdb.html', {'nbucomplist': nbucompquery_results})


class ResultsTable(tables.Table):
    Product_Name = tables.Column()
    Application_Name = tables.Column()
    Storage_Type = tables.Column()
    Version = tables.Column()
    Protocol = tables.Column()

    class Meta:
        attrs = {"class": "paleblue"}  # This is important for nice table display


# SearchForm

def nbucompsearch(request):
    # def rasearch(request):
    '''A view to send user to the tables page'''
    # Display table of Airports to chose from
    # If the form has been submitted...
    # brand_list = VehicleBrand.objects.all()
    # for brands in brand_list:
    #     print brands
    # By default for GET request display the main search option page
    # return {'brand_list' : brand_list}

    if request.method == 'POST':
        # A form bound to the POST data that has fields for user name and user password
        # form = RAForm(request.POST)
        # form = PostForm(request.POST)

        form = SearchForm(request.POST)
        print "Checking if Form is valid..\n" \
              "++++++++++++++++++++++++++++++++"
        # print "===================\nForm is valid.."
        # prodsearchstr = form.cleaned_data['product']
        # print "Fetching the cached results..."
        # print prodsearchstr

        # All validation rules pass
        if form.is_valid():
            print "===================\nForm is valid.."
            print "Fetching the results..."
            storagesearch = form.cleaned_data['storage_search']
            print storagesearch

            versionsearch = form.cleaned_data['version_search']
            print "versionsearch string:"
            print versionsearch

            protocolsearch = form.cleaned_data['protocol_search']
            print "protocolsearch string:"
            print protocolsearch

            protocolstdsearch = form.cleaned_data['protocolstd_search']
            print "protocolstdsearch string:"
            print protocolstdsearch

            item_list = RD.objects.filter(Q(storage__icontains=storagesearch))

            if versionsearch:
                item_list = item_list.filter(version__icontains=versionsearch)

            if protocolsearch:
                print item_list
                # item_list = item_list.filter(protocol__RDProtocol__protocol_name=protocolsearch)
                item_list = item_list.filter(rdprotocol__protocolname__icontains=protocolsearch)

            if protocolstdsearch:
                item_list = item_list.filter(rdprotocol__protocol_standard__icontains=protocolstdsearch)

            print "Items:\n-----------------------\n"
            print item_list
            ####################
            # etrack_ret = ResultsTable(item_list)
            # return render(request, 'smartapp/nbu_result.html', {'nbucomp_got': etrack_ret})
            return render(request, 'smartapp/nbu_result.html', {'nbucomp_got': item_list})
            # else:
            #         # Display no results found
            #         cachequery_results = NBUList.objects.all()
            #         return render(request, 'smartapp/nbusearch.html', {'racache': cachequery_results})
        else:
            cachequery_results = NBUList.objects.all()
            return render(request, 'smartapp/nbusearch.html', {'racache': cachequery_results})
    else:
        cachequery_results = NBUList.objects.all()
        return render(request, 'smartapp/nbusearch.html', {'racache': cachequery_results})


# def nbucompsearch(request):
#     # def rasearch(request):
#     '''A view to send user to the tables page'''
#     # Display table of Airports to chose from
#     # If the form has been submitted...
#     # brand_list = VehicleBrand.objects.all()
#     # for brands in brand_list:
#     #     print brands
#         # By default for GET request display the main search option page
#         # return {'brand_list' : brand_list}
#
#     if request.method == 'POST':
#         # A form bound to the POST data that has fields for user name and user password
#         # form = RAForm(request.POST)
#         # form = PostForm(request.POST)
#
#         form = SearchForm(request.POST)
#         print "Checking if Form is valid..\n" \
#               "++++++++++++++++++++++++++++++++"
#         # print "===================\nForm is valid.."
#         # prodsearchstr = form.cleaned_data['product']
#         # print "Fetching the cached results..."
#         # print prodsearchstr
#
#         # All validation rules pass
#         if form.is_valid():
#             print "===================\nForm is valid.."
#             print "Fetching the results..."
#             prodsearchstr = form.cleaned_data['product_search']
#             # prodsearchstr = prodsearchstr.upper()
#             print prodsearchstr
#
#             appsearchstr = form.cleaned_data['app_search']
#             # appsearchstr = appsearchstr.upper()
#             print "Appsearch string:"
#             print appsearchstr
#
#             print "Fetching the results..."
#
#             item_list = NBUList.objects.filter(product__icontains=prodsearchstr)
#             if appsearchstr:
#                 # appsearchstr = appsearchstr.upper()
#                 item_list = item_list.filter(appname__icontains=appsearchstr)
#                 print "Inside appstr screw up"
#             print "Items:\n-----------------------\n"
#             print item_list
#
#             # nbucompquery_results = NBUList.objects.all()
#             # return render(request, 'smartapp/nbucompdb.html', {'nbucomplist': nbucompquery_results})
#             ####################
#             # etrack_ret = ResultsTable(item_list)
#             # return render(request, 'smartapp/nbu_result.html', {'nbucomp_got': etrack_ret})
#             return render(request, 'smartapp/nbu_result.html', {'nbucomp_got': item_list})
#             # else:
#             #         # Display no results found
#             #         cachequery_results = NBUList.objects.all()
#             #         return render(request, 'smartapp/nbusearch.html', {'racache': cachequery_results})
#         # # else:
#         #     cachequery_results = NBUList.objects.all()
#         #     return render(request, 'smartapp/nbusearch.html', {'racache': cachequery_results})
#     else:
#         cachequery_results = NBUList.objects.all()
#         return render(request, 'smartapp/nbusearch.html', {'racache': cachequery_results})
#
# def search_comp(request):
#     if request.method == "POST":
#         form = PostForm(request.POST)
#         if form.is_valid():
#             post = form.save(commit=False)
#             post.author = request.user
#             post.published_date = timezone.now()
#             post.save()
#             return redirect('post_detail', pk=post.pk)
#     else:
#         form = PostForm()
#     return render(request, 'smartapp/post_edit.html', {'form': form})


# ---------------------------

# Create your views here.

def home(request):
    # return HttpResponse("Hello World!")
    # return render_to_response("smartapp/home.html", {'hello' : "Welcome to S.M.A.R.T."})
    return render_to_response("smartapp/home.html", {'lines': Line.objects.all()})


def smartapp(request):
    # return HttpResponse("Hello World!")
    # return render_to_response("smartapp/home.html", {'hello' : "Welcome to S.M.A.R.T."})
    name = "Pranav"
    t = get_template('smartapp/home.html')
    html = t.render(Context({'name': name}))
    return HttpResponse(html)


def smartapp_simple(request):
    # return HttpResponse("Hello World!")
    # return render_to_response("smartapp/home.html", {'hello' : "Welcome to S.M.A.R.T."})
    name = "Pranav Sahasrabudhe"
    return render_to_response('home.html', {'name': name})


def post_list(request):
    posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
    return render(request, 'smartapp/post_list.html', {'posts': posts})


class SmartTemplate(TemplateView):
    template_name = 'base.html'

    def get_context_data(self, **kwargs):
        context = super(SmartTemplate, self).get_context_data(**kwargs)
        context['name'] = 'PranavS'
        return context


def post_detail(request):
    return render(request, 'smartapp/post_edit.html', {'form': form})


def failview(request):
    '''A view to send user to the fail page if he enters the wrong airport codes'''
    # org working::::
    return render(request, 'smartapp/fail.html')


def post_new(request):
    if request.method == "POST":
        form = PostForm(request.POST)
        if form.is_valid():
            post = form.save(commit=False)
            post.author = request.user
            post.published_date = timezone.now()
            post.save()
            return redirect('post_detail', pk=post.pk)
    else:
        form = PostForm()
    return render(request, 'smartapp/post_edit.html', {'form': form})
